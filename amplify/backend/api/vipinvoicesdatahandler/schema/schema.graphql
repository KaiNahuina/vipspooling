type InvoiceForm
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
      {
        allow: groups
        groups: ["Manager"]
        operations: [create, update, delete, read]
      }
      { allow: groups, groups: ["Operator"], operations: [create, read] }
    ]
  ) {
  WorkTicketID: ID! @primaryKey
  InvoiceDate: AWSDate!
  Spooler: String!
  WorkType: String!
  CableCompany: String!
  CableCompanyLocation: String!
  OilCompany: String!
  WellName: String!
  WellNumber: String!
  LaborCosts: [LaborCost]!
  JobType: [String]!
  Consumables: [Consumable]!
  Notes: String
  CableDetails: CableDetail
  ReelNumber: String!
  ExtraCharges: Float
  InvoiceTotal: Float!
  CustomerSignature: String!
  FinalProductFile: String
}

type LaborCost {
  rate: Float
  qty: Int
  amount: Float
}

type Consumable {
  item: String
  qty: Int
  rate: Float
  amount: Float
}

type CableDetail {
  CableType: String
  CableLength: Float
}

type JsaForm
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
      {
        allow: groups
        groups: ["Manager"]
        operations: [create, update, delete, read]
      }
      { allow: groups, groups: ["Operator"], operations: [create, read] }
    ]
  ) {
  WorkTicketID: String!
  CustomerName: String! @primaryKey
  CreatedBy: String!
  FormDate: AWSDate!
  EffectiveDate: AWSDate!
  Location: String!
  Personnel: [Person]!
  FinalProductFile: String
}

type Person {
  Role: String!
  PersonName: String!
  Signature: String!
}

type CapillaryForm
  @model(timestamps: { createdAt: "createdAt", updatedAt: "updatedAt" })
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
      {
        allow: groups
        groups: ["Manager"]
        operations: [read, create, delete, update]
      }
      {
        allow: groups
        groups: ["Operator"]
        operations: [create, read, update]
      }
    ]
  ) {
  WorkTicketID: String! @primaryKey
  SubmissionDate: AWSDate
  Date: AWSDate!
  TechnicianName: String!
  Customer: String!
  WellName: String!
  TypeOfJob: String!
  VisualConfirmation: String!
  IntervalPumping: String!
  PressureWhilePumping: String!
  PressureBleed: String!
  CapillaryFlush: String!
  ManifoldStatus: String!
  LineTest: String!
  CapillarySize: String!
  Metallurgy: String!
  Length: String!
  FluidPumped: String!
  TotalGallons: String!
  Notes: String
  FinalProductFile: String
}

type Template
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
      { allow: groups, groups: ["Operator"], operations: [read] }
    ]
  ) {
  TemplateID: ID! @primaryKey
  Version: String!
  TemplateDate: AWSDate
  Content: String
  file: String! # S3 URL to PDF file
}

type User
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
      {
        allow: groups
        groups: ["Manager"]
        operations: [create, update, delete, read]
      }
      {
        allow: groups
        groups: ["Operator"]
        operations: [create, update, delete, read]
      }
    ]
  ) {
  UserID: ID! @primaryKey
  Name: String!
  Email: String!
  Role: String!
  phoneNumber: String
}

type PricingPlan
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
      { allow: groups, groups: ["Manager"], operations: [read] }
      { allow: groups, groups: ["Operator"], operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  PlanID: String!
  PlanDate: AWSDate
  Description: String
  file: String!
}
